{"version":3,"sources":["src/strftime.js"],"names":[],"mappings":"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","file":"src/strftime.js","sourcesContent":["\nfunction strsplice (a, i, n, b) {\n  return a.slice(0, i) + (b || '') + str.slice(i + n)\n}\n\nlet fmt = {\n\n  // Day\n  '%a': /(Sun|Mon|Tue|Wed|Thu|Fri|Sat)/,\n  '%A': /(Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday)/,\n  '%d': /(0[1-9]|[12][0-9]|3[01])/, // 01..31\n  '%e': /( [1-9]|[12][0-9]|3[01])/, // _1..31\n  '%j': /([0-2][0-9]{2}|3[0-5][0-9]|36[0-6])/,\n  '%u': /([1-7])/, // 1..7\n  '%w': /(0-6)/, // 0..6\n\n  // Week\n  '%U': /(0[0-9]|[1-4][0-9]|5[0-3])/, // 00..53\n  '%V': /(0[1-9]|[1-4][0-9]|5[0-3])/, // 01..53\n  '%W': /(0[0-9]|[1-4][0-9]|5[0-3])/, // 00..53\n\n  // Month\n  '%b': /(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)/,\n  '%B': /(January|February|March|April|May|June|July|August|September|October|November|December)/,\n  '%h': /(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)/,\n  '%m': /(0[1-9]|1[0-2])/, // 01..12\n\n  // Year\n  '%C': /([0-9]{2})/, // 00..99\n  '%g': /([0-9]{2})/, // 00..99\n  '%G': /([0-9]{4})/, // 0000..9999\n  '%y': /([0-9]{2})/, // 00..99\n  '%Y': /([0-9]{4})/, // 0000..9999\n\n  // Time\n  '%H': /(0[0-9]|1[0-9]|2[0-3])/, // 00..23\n  '%k': /( [0-9]|1[0-9]|2[0-3])/, // _0..23\n  '%I': /(0[1-9]|1[0-2])/, // 01..12\n  '%l': /( [1-9]|1[0-2])/, // _1..12\n  '%M': /([0-5][0-9])/, // 00..59\n  '%p': /(AM|PM)/,\n  '%P': /(am|pm)/,\n  '%r': '%I:%M:%S %p',\n  '%R': '%H:%M',\n  '%S': /([0-5][0-9])/,\n  '%T': /%H:%M:%S/,\n  '%X': /%H:%M:%S/,\n  '%z': /([+-][0-9]{4}|)/,\n  '%Z': /([A-Z]+)/,\n\n  // Time and Date Stamps\n  // %c not supported.\n  '%D': '%m/%d/%y',\n  '%F': '%Y-%m-%d',\n  '%s': /([0-9]+)/,\n  // %x not supported.\n\n  // Misc\n  '%n': /\\n/,\n  '%t': /\\t/,\n  '%%': /\\%/\n}\n\n// Maximum format string length.\nlet max = 1023\n\nfunction test_ (f, d) {\n  let r = false\n\n  let i = 0\n  let j = 0\n  let err = null\n\n  if (typeof(f) === 'string' && typeof(d) === 'string' && f.length < max) {\n    r = true\n    while (r && i < f.length && j < d.length) {\n      if (f[i] === '%') {\n        let t = f.substr(i, 2)\n        // console.log('t', t, f, i)\n        let u = fmt[t]\n        if (u) {\n          if (typeof(u) === 'string') {\n\n            // fmt rule is a string, expand, ie. '%F' -> '%Y-%m-%d'.\n            f = strsplice(f, 0, 2, u)\n          } else {\n            let m = d.substr(j).match(fmt[t])\n            if (m) {\n              // console.log('matched', t)\n              i += 2; j += m[0].length\n            } else {\n              [ err, r ] = [ new Error(`invalid input for ${t}`), false ]\n            }\n          }\n        } else {\n          [ err, r ] = [ new Error(`unknown token ${t}`), false ]\n        }\n      } else {\n        if (f[i] === d[j]) {\n          // console.log('++', f[i])\n          i++; j++\n        } else {\n          [ err, r ] = [ new Error(`direct match failed ${f[i]} != ${d[j]}`), false ]\n        }\n      }\n    }\n    if (r) {\n      if (i !== f.length) {\n        [ err, r ] = [ new Error(`invalid extras`), false ]\n      }\n      if (j !== d.length) {\n        [ err, r ] = [ new Error(`not fully matched`), false ]\n      }\n    }\n  }\n\n  return [ err, r, i, j ]\n}\n\nexport function test (a, b) {\n  let [ err, r, i, j ] = test_(a, b)\n  return r\n}\n"]}